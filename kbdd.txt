# input vars
boolean a[3..0] b[3..0] cin d[15..0]

# define the correct circuit
adder 4 cout_gold sum[3..0] a[3..0] b[3..0] cin

# define the bug circuit
eval q1 a0 ^ b0
eval q2 a1 ^ b1
eval q3 a2 ^ b2
eval q4 a3 ^ b3
eval c1 (cin&a0) + (cin&b0) + (a0&b0)
eval c2 (c1&a1) + (c1&b1) + (a1&b1)
eval c3 (c2&a2) + (c2&b2) + (a2&b2)
eval c4 (c3&a3) + (c3&b3) + (a3&b3)
eval select (d0 & !q1 & !q2 & !q3 & !q4) + (d1 & q1 & !q2 & !q3 & !q4) + (d2 & !q1 & q2 & !q3 & !q4) + (d3 & q1 & q2 & !q3 & !q4) + (d4 & !q1 & !q2 & q3 & !q4) + (d5 & q1 & !q2 & q3 & !q4) + (d6 & !q1 & q2 & q3 & !q4) + (d7 & q1 & q2 & q3 & !q4) + (d8 & !q1 & !q2 & !q3 & q4) + (d9 & q1 & !q2 & !q3 & q4) + (d10 & !q1 & q2 & !q3 & q4) + (d11 & q1 & q2 & !q3 & q4) + (d12 & !q1 & !q2 & q3 & q4) + (d13 & q1 & !q2 & q3 & q4) + (d14 & !q1 & q2 & q3 & q4) + (d15 & q1 & q2 & q3 & q4)
eval repair (select & cin)+(!select & c4 )

# make the Z function that compares the right version of
# the network and the version with the MUX replacing

# suspect gate (this is EXNOR of cout and repair functions)
eval Z repair & cout_gold + !repair & !cout_gold 
quantify u ForallZ Z a[3..0] b[3..0] cin
# let’s ask kbdd to show an equation for this quantified function
sop ForallZ
# what values of the d’s make this function == 1?
satisfy ForallZ
# that’s it!
quit